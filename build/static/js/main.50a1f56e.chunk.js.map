{"version":3,"sources":["todos.js","addForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","aria-describedby","onChange","placeholder","Component","App","getTodos","curId","filter","updateData","console","log","localStorage","setItem","JSON","stringify","curdos","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAuBeA,EArBD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,WACbC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACJ,yBAAKC,UAAU,YAAWC,IAAKF,EAAKG,IAChC,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAKI,SACjC,uBAAGH,UAAU,wBAAwBI,QAAS,WAAOT,EAAWI,EAAKG,MAArE,eAMR,uBAAGF,UAAU,eAAb,wCAEJ,OACI,yBAAKA,UAAU,WACVJ,ICiBES,E,4MAjCXC,MAAM,CACFH,QAAS,I,EAEbI,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVN,QAASK,EAAEE,OAAOC,S,EAG1BC,aAAe,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SACD,CACIN,QAAS,M,uDAKnB,OACI,yBAAKH,UAAU,iBACf,0BAAMgB,SAAUC,KAAKL,cACrB,yBAAKZ,UAAU,cACb,+CACA,2BAAOkB,KAAK,OAAOlB,UAAU,eAAeE,GAAG,qBAAqBiB,mBAAiB,YAAYC,SAAUH,KAAKV,aAAcI,MAAOM,KAAKX,MAAMH,QAASkB,YAAY,gBACrK,2BAAOnB,GAAG,YAAYF,UAAU,wBAAhC,4BAEF,4BAAQkB,KAAK,SAASlB,UAAU,mBAAhC,gB,GA3BUsB,aCqDPC,E,4MAjDbjB,MAAQ,CACNZ,MAAO,EAAK8B,Y,EAEdC,MAAQ,EAAKnB,MAAMZ,MAAM,EAAKY,MAAMZ,MAAMG,OAAQ,GAAGK,G,EACrDP,WAAa,SAACO,GACZ,IAAMR,EAAQ,EAAKY,MAAMZ,MAAMgC,QAAO,SAAA3B,GACpC,OAAOA,EAAKG,KAAMA,KAEpB,EAAKyB,WAAWjC,GAChB,EAAKe,SAAS,CACZf,W,EAGJqB,QAAU,SAAChB,GACTA,EAAKG,GAAK,EAAKuB,OAAO,EACtB,IAAI/B,EAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAuBK,IAChC,EAAK4B,WAAWjC,GAChB,EAAKe,SAAS,CACZf,UAEFkC,QAAQC,IAAI,EAAKvB,Q,yDAERP,GACT+B,aAAaC,QAAQ,QAASC,KAAKC,UAAUlC,M,iCAG7C,IAAIL,EACJ,GAAGoC,aAAajC,OAAS,EACvBH,EAAO,CACL,CAACQ,GAAI,EAAGC,QAAS,iBACjB,CAACD,GAAI,EAAGC,QAAS,mBAEhB,CACH,IAAM+B,EAASJ,aAAaK,QAAQ,SACpCzC,EAAQsC,KAAKI,MAAMF,GAErB,OAAOxC,I,+BAGP,OACE,yBAAKM,UAAU,iBACb,wBAAIA,UAAU,uCAAd,cACA,kBAAC,EAAD,CAAON,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,aACjD,kBAAC,EAAD,CAASoB,QAAWE,KAAKF,e,GA5CfO,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.50a1f56e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Todos = ({todos, deleteTodo}) =>{\n    const todoList = todos.length ? (\n        todos.map(todo =>{\n            return (\n        <div className=\"card my-2\"key={todo.id}>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{todo.content}</h5>\n                <p className=\"btn btn-danger delete\" onClick={() => {deleteTodo(todo.id)}}>Remove</p>\n            </div>\n        </div>\n            )\n        })\n    ) : (\n        <p className=\"text-center\">You currently do not have any todos!</p>\n        )\n    return (\n        <div className=\"mx-auto\">\n            {todoList}\n        </div>\n    )\n}\nexport default Todos","import React, { Component } from \"react\"\n\nclass AddTodo extends Component{\n    state={\n        content: \"\"\n    }\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n    handleSubmit = (e) =>{\n          e.preventDefault();  \n          this.props.addTodo(this.state)\n          this.setState(\n              {\n                  content: \"\"\n              }\n          )\n    }\n    render(){\n        return(\n            <div className=\"formcontainer\">\n            <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <label>Add New todo</label>\n              <input type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" onChange={this.handleChange} value={this.state.content} placeholder=\"Enter email\"/>\n              <small id=\"emailHelp\" className=\"form-text text-muted\">Enter a valid todo name</small>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo","import React, { Component } from 'react';\nimport Todos from './todos';\nimport AddTodo from './addForm';\n\n\nclass App extends Component {\n  state = {\n    todos: this.getTodos()\n  }\n  curId = this.state.todos[this.state.todos.length -1].id\n  deleteTodo = (id) =>{\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !==id\n    });\n    this.updateData(todos)\n    this.setState({\n      todos\n    })\n  }\n  addTodo = (todo) =>{\n    todo.id = this.curId+=1;\n    let todos=[...this.state.todos, todo];\n    this.updateData(todos);\n    this.setState({\n      todos\n    })\n    console.log(this.state)\n  }\n  updateData(todo){\n    localStorage.setItem('todos', JSON.stringify(todo));\n  }\n  getTodos(){\n    let todos;\n    if(localStorage.length < 1){\n      todos= [\n        {id: 1, content: \"Buy some Milk\"},\n        {id: 2, content: \"Play zelda\"}\n      ]\n    }else{\n      const curdos = localStorage.getItem('todos');\n      todos = JSON.parse(curdos);\n    }\n    return todos;\n  }\n  render(){\n    return (\n      <div className=\"App container\">\n        <h1 className=\"text-center my-5 font-weight-bolder\">Just Do It</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n        <AddTodo addTodo = {this.addTodo}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}